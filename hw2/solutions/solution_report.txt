CS 519-005, Algorithms (MS/MEng-level), Winter 2018
HW2 - Divide-n-conquer: mergesort, number of inversions, longest path
Solutions

0. Which of the following sorting algorithms are (or can be made) stable?
   (a) mergesort
   (b) quicksort with the first element as pivot
   (c) quicksort with randomized pivot
   (d) selection sort
   (e) insertion sort
   (f) heap sort --- not covered yet (see CLRS Ch. 6)

A: (a) stable, since it always moving the left one first when two elements are equal when combining two sorted lists.
   (b) stable if not in-place (e.g., list comprehension); not stable if in-place swap.
   (c) not stable even not in-place, since the chosen pivot might be the second of the duplicates:
       sort([3a 4 1 3b 5 3c 2])
       random choice: 3b, then partitions into [1 2]  [3b]  [3a 4 5 3c]
       can be made stable by three-way partition.

   (d) not stable if in-place, e.g. sort(4a 2 3 4b 1)
       1 2 3 4b 4a  <-- first 4 is now after the second 4 due to swap of 1 and 4a

       (stable if not in-place)
        
   (e) stable
   (f) not stable. Order of non-root elements in heap might not be kept.

Note, however, that any sort can be made stable by adding the element's index into its key as 'the second key' and then sort (called "decorate-sort-undecorate", see python tutorial slides), e.g.:

      [x for (x, _) in sorted([(x, i) for (i, x) in enumerate(a)])]

Note: most in-place implementations of sorting algorithms are unstable.
      most non-in-place implementations are stable.

